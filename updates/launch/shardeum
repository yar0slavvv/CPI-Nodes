#!/usr/bin/env bash

echo " "
echo "——————————————————————————————————————————"
echo " "
set -e
echo -e "\033[1;97;42mОновлення пакетів серверу...\033[0m"
sudo apt-get install curl

sudo apt update

echo "   "
echo -e "\e[43;30mІз запуском цього скрипта ви дозволяєте команді 'Shardeum' збирати ваші дані (y/n)?: \033[0m"
read WARNING_AGREE

WARNING_AGREE=${WARNING_AGREE:-y}

if [ "$WARNING_AGREE" != "y" ]; then
  echo "Збір даних відхилено. Зупинка скрипта..."
  exit
fi

export DOCKER_DEFAULT_PLATFORM=linux/amd64

docker-safe() {
  if ! command -v docker &>/dev/null; then
    echo "docker не встановлено"
    exit 1
  fi

  if ! docker $@; then
    echo "Спроба з sudo..."
    sudo docker $@
  fi
}

docker-compose-safe() {
  if command -v docker-compose &>/dev/null; then
    cmd="docker-compose"
  elif docker --help | grep -q "compose"; then
    cmd="docker compose"
  else
    echo -e "\033[1;97;41mdocker-compose або docker не встановлено\033[0m"
    exit 1
  fi

  if ! $cmd $@; then
    echo "Спроба з sudo..."
    sudo $cmd $@
  fi
}

get_ip() {
  local ip
  if command -v ip >/dev/null; then
    ip=$(ip addr show $(ip route | awk '/default/ {print $5}') | awk '/inet/ {print $2}' | cut -d/ -f1 | head -n1)
  elif command -v netstat >/dev/null; then
    interface=$(netstat -rn | awk '/default/{print $4}' | head -n1)
    ip=$(ifconfig "$interface" | awk '/inet /{print $2}')
  else
    echo -e "\033[1;97;41mПомилка: не знайдено ані команди «ip», ані «ifconfig». Спробуйте перевстановити docker, або ж зверніться до нашої команди.\033[0m"
    return 1
  fi
  echo $ip
}

get_external_ip() {
  external_ip=''
  external_ip=$(curl -s https://api.ipify.org)
  if [[ -z "$external_ip" ]]; then
    external_ip=$(curl -s http://checkip.dyndns.org | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
  fi
  if [[ -z "$external_ip" ]]; then
    external_ip=$(curl -s http://ipecho.net/plain)
  fi
  if [[ -z "$external_ip" ]]; then
    external_ip=$(curl -s https://icanhazip.com/)
  fi
    if [[ -z "$external_ip" ]]; then
    external_ip=$(curl --header  "Host: icanhazip.com" -s 104.18.114.97)
  fi
  if [[ -z "$external_ip" ]]; then
    external_ip=$(get_ip)
    if [ $? -eq 0 ]; then
      echo "The IP address is: $IP"
    else
      external_ip="localhost"
    fi
  fi
  echo $external_ip
}

if [[ $(docker-safe info 2>&1) == *"Неможливо зупустити Docker daemon"* ]]; then
    echo -e "\033[1;97;41mDocker daemon не запущено\033[0m"
    exit 1
else
    echo -e "\033[1;97;42mDocker daemon запущено\033[0m"
fi
clear

echo -e '\n\e[42mЗбір інформації користувача\e[0m\n'

unset CHARCOUNT
echo -e "\e[43;30mВстановіть пароль для доступу до вашого Веб-інтерфейсу: \033[0m"
CHARCOUNT=0
while IFS= read -p "$PROMPT" -r -s -n 1 CHAR
do
  if [[ $CHAR == $'\0' ]] ; then
    if [ $CHARCOUNT -gt 0 ] ; then
      break
    else
      echo -e "\033[1;97;41mНе правильний пароль, довжина повинна бути більше 0 символів:\033[0m"
      continue
    fi
  fi
  # Backspace
  if [[ $CHAR == $'\177' ]] ; then
    if [ $CHARCOUNT -gt 0 ] ; then
      CHARCOUNT=$((CHARCOUNT-1))
      PROMPT=$'\b \b'
      DASHPASS="${DASHPASS%?}"
    else
      PROMPT=''
    fi
  else
    CHARCOUNT=$((CHARCOUNT+1))
    PROMPT='*'
    DASHPASS+="$CHAR"
  fi
done

echo -e "\033[1;97;42mПароль збережено як: \033[0m" $DASHPASS #DEBUG: TEST PASSWORD WAS RECORDED AFTER ENTERED.

while :; do
  echo -e "\e[43;30mВведіть порт (1025-65536) для доступу до вашого веб-інтерфейсу (за замовчуванням 8080 натисніть Enter): :\e[0m"
  read  DASHPORT
  DASHPORT=${DASHPORT:-8080}
  [[ $DASHPORT =~ ^[0-9]+$ ]] || { echo "Введіть дійсний порт"; continue; }
  if ((DASHPORT >= 1025 && DASHPORT <= 65536)); then
    DASHPORT=${DASHPORT:-8080}
    break
  else
    echo -e "\033[1;97;41mПорт не дійсний, спробуйте ще раз\033[0m" - червоний
  fi
done

while :; do
  echo "\e[43;30mЩоб запустити валідатор у мережі Sphinx, вам потрібно буде відкрити два порти у вашому брандмауері.\033[0m"
  echo -e "\e[43;30mВведіть перший порт (1025-65536) для p2p комунікації (за замовчуванням 9001 натисніть Enter): \033[0m"
  read SHMEXT
  SHMEXT=${SHMEXT:-9001}
  [[ $SHMEXT =~ ^[0-9]+$ ]] || { echo "\033[1;97;41mВедіть дійсний порт"; continue;\033[0m }
  if ((SHMEXT >= 1025 && SHMEXT <= 65536)); then
    SHMEXT=${SHMEXT:-9001}
  else
    echo "\033[1;97;41mПорт не дійсний, спробуйте ще раз\033[0m"
  fi
  echo -e "\e[43;30mВведіть другий порт (1025-65536) для p2p комунікації (за замовчуванням 10001 натисніть Enter): \033[0m"
  read SHMINT
  SHMINT=${SHMINT:-10001}
  [[ $SHMINT =~ ^[0-9]+$ ]] || { echo "\033[1;97;41mВедіть дійсний порт"; continue;\033[0m }
  if ((SHMINT >= 1025 && SHMINT <= 65536)); then
    SHMINT=${SHMINT:-10001}
    break
  else
    echo "\033[1;97;41mПорт не дійсний, спробуйте ще раз\033[0m"
  fi
done

echo -e "\e[43;30mЯкий базовий каталог повинен використовувати вузол (за замовчуванням ~/.shardeum натисніть Enter): \033[0m"
read NODEHOME
NODEHOME=${NODEHOME:-~/.shardeum}

APPSEEDLIST="archiver-sphinx.shardeum.org"
APPMONITOR="monitor-sphinx.shardeum.org"
clear

echo -e '\n\e[42mВидалення старого проекту\e[0m\n'


if [ -d "$NODEHOME" ]; then
  if [ "$NODEHOME" != "$(pwd)" ]; then
    echo "\033[1;97;42mВидалення існуючого каталогу $NODEHOME...\033[0m"
    rm -rf "$NODEHOME"
  else
    echo "\033[1;97;41mНеможливо видалити поточний робочий каталог. Будь ласка, перейдіть до іншого каталогу та повторіть спробу.\033[0m"
  fi
fi

git clone https://gitlab.com/shardeum/validator/dashboard.git ${NODEHOME} &&
  cd ${NODEHOME} &&
  chmod a+x ./*.sh
clear

echo -e '\n\e[42mСтворення і встановлення ./env файлу\e[0m\n'

SERVERIP=$(get_external_ip)
LOCALLANIP=$(get_ip)
cd ${NODEHOME} &&
touch ./.env
cat >./.env <<EOL
APP_IP=auto
EXISTING_ARCHIVERS=[{"ip":"18.194.3.6","port":4000,"publicKey":"758b1c119412298802cd28dbfa394cdfeecc4074492d60844cc192d632d84de3"},{"ip":"139.144.19.178","port":4000,"publicKey":"840e7b59a95d3c5f5044f4bc62ab9fa94bc107d391001141410983502e3cde63"},{"ip":"139.144.43.47","port":4000,"publicKey":"7af699dd711074eb96a8d1103e32b589e511613ebb0c6a789a9e8791b2b05f34"},{"ip":"72.14.178.106","port":4000,"publicKey":"2db7c949632d26b87d7e7a5a4ad41c306f63ee972655121a37c5e4f52b00a542"}]
APP_MONITOR=${APPMONITOR}
DASHPASS=${DASHPASS}
DASHPORT=${DASHPORT}
SERVERIP=${SERVERIP}
LOCALLANIP=${LOCALLANIP}
SHMEXT=${SHMEXT}
SHMINT=${SHMINT}
EOL
clear

echo -e '\n\e[42mВидалення старого проекту ./env файлу\e[0m\n'

./cleanup.sh
clear

echo -e '\n\e[42mСтворення віртуального середовища під ноду ./env файлу\e[0m\n'

cd ${NODEHOME} &&
docker-safe build --no-cache -t local-dashboard -f Dockerfile --build-arg RUNDASHBOARD=${RUNDASHBOARD} .
clear

echo -e '\n\e[42mЗапуск проекту ./env файлу\e[0m\n'

cd ${NODEHOME}
if [[ "$(uname)" == "Darwin" ]]; then
  sed "s/- '8080:8080'/- '$DASHPORT:$DASHPORT'/" docker-compose.tmpl > docker-compose.yml
  sed -i '' "s/- '9001-9010:9001-9010'/- '$SHMEXT:$SHMEXT'/" docker-compose.yml
  sed -i '' "s/- '10001-10010:10001-10010'/- '$SHMINT:$SHMINT'/" docker-compose.yml
else
  sed "s/- '8080:8080'/- '$DASHPORT:$DASHPORT'/" docker-compose.tmpl > docker-compose.yml
  sed -i "s/- '9001-9010:9001-9010'/- '$SHMEXT:$SHMEXT'/" docker-compose.yml
  sed -i "s/- '10001-10010:10001-10010'/- '$SHMINT:$SHMINT'/" docker-compose.yml
fi
./docker-up.sh

echo -e '\n\e[42mЗапуск ноди, це займе якийсь час...\e[0m\n'
(docker-safe logs -f shardeum-dashboard &) | grep -q 'done'

#Do not indent
if [ $RUNDASHBOARD = "y" ]
then
cat <<EOF
echo -e '\n\e[42mНоду успішно встановлено\e[0m\n'
echo " "
echo "\033[1;97;43m\033[90mДалі продовжуйте слідкувати гайду в Notion\033[0m"
sleep 3
EOF
fi

echo "     "
echo -e "(\033[38;5;244m1\033[0m) Повернутися на початок  (\033[38;5;244m2\033[0m) Керувати нодою"
echo "     "
while true; do
  read a
 
  case $a in
   1)
      bash <(curl -s https://yar0slavvv.github.io/CPI-Nodes/main-menu)
      ;;
   2)
      bash <(curl -s https://yar0slavvv.github.io/CPI-Nodes/tools/shardeum)
      ;;
    *)
      echo "Невірний вибір"
      ;;
esac
done

exit
